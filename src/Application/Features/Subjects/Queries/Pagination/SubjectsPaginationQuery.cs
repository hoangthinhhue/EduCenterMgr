//------------------------------------------------------------------------------
// <auto-generated>
//     This file is part of the CleanArchitecture.Blazor project.
//     Licensed to the .NET Foundation under the MIT license.
//     See the LICENSE file in the project root for more information.
//
//     Author: neozhu
//     Created Date: 2025-02-17
//     Last Modified: 2025-02-17
//     Description: 
//       Defines a query for retrieving subjects with pagination and filtering 
//       options. The result is cached to enhance performance for repeated queries.
// </auto-generated>
//------------------------------------------------------------------------------

using CleanArchitecture.Blazor.Application.Features.Subjects.DTOs;
using CleanArchitecture.Blazor.Application.Features.Subjects.Caching;
using CleanArchitecture.Blazor.Application.Features.Subjects.Mappers;
using CleanArchitecture.Blazor.Application.Features.Subjects.Specifications;

namespace CleanArchitecture.Blazor.Application.Features.Subjects.Queries.Pagination;

public class SubjectsWithPaginationQuery : SubjectAdvancedFilter, ICacheableRequest<PaginatedData<SubjectDto>>
{
    public override string ToString()
    {
        return $"Listview:{ListView}:{CurrentUser?.UserId}-{LocalTimezoneOffset.TotalHours}, Search:{Keyword}, {OrderBy}, {SortDirection}, {PageNumber}, {PageSize}";
    }
    public string CacheKey => SubjectCacheKey.GetPaginationCacheKey($"{this}");
    public IEnumerable<string>? Tags => SubjectCacheKey.Tags;
    public SubjectAdvancedSpecification Specification => new SubjectAdvancedSpecification(this);
}
    
public class SubjectsWithPaginationQueryHandler :
         IRequestHandler<SubjectsWithPaginationQuery, PaginatedData<SubjectDto>>
{
        private readonly IApplicationDbContext _context;

        public SubjectsWithPaginationQueryHandler(
            IApplicationDbContext context)
        {
            _context = context;
        }

        public async Task<PaginatedData<SubjectDto>> Handle(SubjectsWithPaginationQuery request, CancellationToken cancellationToken)
        {
           var data = await _context.Subjects.OrderBy($"{request.OrderBy} {request.SortDirection}")
                                                   .ProjectToPaginatedDataAsync(request.Specification, 
                                                                                request.PageNumber, 
                                                                                request.PageSize, 
                                                                                SubjectMapper.ToDto, 
                                                                                cancellationToken);
            return data;
        }
}