//------------------------------------------------------------------------------
// <auto-generated>
//     This file is part of the CleanArchitecture.Blazor project.
//     Licensed to the .NET Foundation under the MIT license.
//     See the LICENSE file in the project root for more information.
//
//     Author: neozhu
//     Created Date: 2025-02-17
//     Last Modified: 2025-02-17
//     Description: 
//       Defines a query to retrieve all subjects from the database. The result 
//       is cached to improve performance and reduce database load for repeated 
//       queries.
// </auto-generated>
//------------------------------------------------------------------------------

using CleanArchitecture.Blazor.Application.Features.Subjects.DTOs;
using CleanArchitecture.Blazor.Application.Features.Subjects.Mappers;
using CleanArchitecture.Blazor.Application.Features.Subjects.Caching;

namespace CleanArchitecture.Blazor.Application.Features.Subjects.Queries.GetAll;

public class GetAllSubjectsQuery : ICacheableRequest<IEnumerable<SubjectDto>>
{
   public string CacheKey => SubjectCacheKey.GetAllCacheKey;
   public IEnumerable<string>? Tags => SubjectCacheKey.Tags;
}

public class GetAllSubjectsQueryHandler :
     IRequestHandler<GetAllSubjectsQuery, IEnumerable<SubjectDto>>
{
    private readonly IApplicationDbContext _context;

    public GetAllSubjectsQueryHandler(
        IApplicationDbContext context)
    {
        _context = context;
    }

    public async Task<IEnumerable<SubjectDto>> Handle(GetAllSubjectsQuery request, CancellationToken cancellationToken)
    {
        var data = await _context.Subjects.ProjectTo()
                                                .AsNoTracking()
                                                .ToListAsync(cancellationToken);
        return data;
    }
}


